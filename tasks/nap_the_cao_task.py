import os
import discord


from discord.ext import commands, tasks
from database.models import HistoryExchangeCard
from database.session import SessionLocal

from api.card2k.exchange_card import ExchangeCard as ExchangeCardAPI
from utils.config import get_config_value, get_config
from utils.env import get_env
from utils.embed import error_embed, _add_footer, success_embed, disabled_command_embed
from helpers.console import logger

class NapTheCaoTask(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.nap_the_cao_service = ExchangeCardAPI()
        
        if get_config_value("card_status_check", {}).get("type") == "api":
            self.delay_time = int(get_config_value("card_status_check", {}).get("delay_time", 60))

            # N·∫øu delay_time nh·ªè h∆°n 30 th√¨ set l·∫°i th√†nh 30
            if self.delay_time < 30:
                self.delay_time = 30

            # Kh·ªüi t·∫°o task loop v·ªõi delay_time ƒë·ªông
            self.check_history_exchange_card.change_interval(seconds=self.delay_time)
            self.check_history_exchange_card.start()
            # Kh·ªüi t·∫°o session ƒë·ªÉ x·ª≠ l√Ω database
            self.session = SessionLocal()
        else:
            logger.info("[TASK: NAP_THE_CAO] Ki·ªÉm tra l·ªãch s·ª≠ ƒë·ªïi th·∫ª c√†o b·∫±ng callback.")

    def cog_unload(self):
        self.check_history_exchange_card.cancel()
        self.session.close()

    @tasks.loop(seconds=60)
    async def check_history_exchange_card(self):
        await self._validated_setup()

        history_exchange_cards = self.session.query(HistoryExchangeCard).filter(HistoryExchangeCard.status == "pending").all()

        if len(history_exchange_cards) == 0:
            logger.info("[TASK: NAP_THE_CAO] Kh√¥ng c√≥ th·∫ª ƒëang ch·ªù x·ª≠ l√Ω.")
            return

        for card_pending in history_exchange_cards:
            logger.info(f"[TASK: NAP_THE_CAO] Ph√°t hi·ªán th·∫ª ƒëang ch·ªù x·ª≠ l√Ω: {card_pending.transaction_id}")
            data = {
                "telco": card_pending.telco,
                "amount": card_pending.value,
                "code": card_pending.code,
                "serial": card_pending.serial,
                "request_id": card_pending.request_id,
            }
            response = self.nap_the_cao_service.check_exchange_card(data)

            if response is None:
                logger.error(f"[TASK: NAP_THE_CAO] L·ªói khi ki·ªÉm tra tr·∫°ng th√°i th·∫ª: {card_pending.transaction_id}")
                continue
            
            elif response["status"] == 99:
                logger.info(f"[TASK: NAP_THE_CAO] Th·∫ª ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω: #{card_pending.transaction_id}")
                continue
            
            elif response["status"] == 4:
                logger.info(f"[TASK: NAP_THE_CAO] H·ªá th·ªëng ƒëang b·∫£o tr√¨: #{card_pending.transaction_id}")
                continue
            
            elif response["status"] == 1:
                logger.info(f"[TASK: NAP_THE_CAO] Th·∫ª th√†nh c√¥ng - ƒë√∫ng m·ªánh gi√°: #{card_pending.transaction_id}")
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                card_pending.card_value = response["declared_value"]
                card_pending.status = "success"
                self.session.commit()
                
                # C·∫≠p nh·∫≠t Discord message
                await self._update_discord_message(card_pending, "success")
                continue

            elif response["status"] == 2:
                logger.info(f"[TASK: NAP_THE_CAO] Th·∫ª th√†nh c√¥ng - sai m·ªánh gi√° - tr·ª´ 50% gi√° tr·ªã: #{card_pending.transaction_id}")
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i
                card_pending.card_value = response["declared_value"]
                card_pending.status = "wrong_amount"
                self.session.commit()
                
                # C·∫≠p nh·∫≠t Discord message
                await self._update_discord_message(card_pending, "wrong_amount")
                continue

            else:
                logger.error(f"[TASK: NAP_THE_CAO] Th·∫ª l·ªói - {response['message']}: #{card_pending.transaction_id}")
                card_pending.status = "failed"
                self.session.commit()
                
                # C·∫≠p nh·∫≠t Discord message
                await self._update_discord_message(card_pending, "failed", response.get("message"))
                continue

    @check_history_exchange_card.before_loop
    async def before_check(self):
        """
        ƒê·∫£m b·∫£o v√≤ng l·∫∑p ch·ªâ b·∫Øt ƒë·∫ßu sau khi bot ƒë√£ ƒëƒÉng nh·∫≠p v√† s·∫µn s√†ng
        """
        await self.bot.wait_until_ready()
        logger.info("[TASK: NAP_THE_CAO] Task NAP_THE_CAO ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông.")

    async def _validated_setup(self):
        """
        Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c√≥ t·ªìn t·∫°i
        """
        required_env = ["DISCORD_TOKEN", "GUILD_ID", "PARTNER_ID", "PARTNER_KEY"]
        missing_env = [env for env in required_env if not get_env(env)]

        # Ki·ªÉm tra file .env c√≥ t·ªìn t·∫°i
        if not os.path.exists(".env"):
            return logger.warning("[TASK: NAP_THE_CAO] File .env kh√¥ng t·ªìn t·∫°i.")

        # Ki·ªÉm tra c√°c bi·∫øn m√¥i tr∆∞·ªùng c√≥ t·ªìn t·∫°i
        if missing_env:
            return logger.warning(f"[TASK: NAP_THE_CAO] Thi·∫øu c√°c bi·∫øn m√¥i tr∆∞·ªùng: {', '.join(missing_env)}")

    async def _update_discord_message(self, card_history: HistoryExchangeCard, status: str, error_message: str = None):
        """
        C·∫≠p nh·∫≠t Discord message khi tr·∫°ng th√°i th·∫ª thay ƒë·ªïi
        """
        try:
            # T√¨m message Discord d·ª±a tr√™n message_discord_id v√† channel_discord_id
            message_id = int(card_history.message_discord_id)
            
            message = None
            
            # N·∫øu c√≥ channel_discord_id, t√¨m tr·ª±c ti·∫øp trong channel ƒë√≥
            if card_history.channel_discord_id:
                try:
                    channel_id = int(card_history.channel_discord_id)
                    channel = self.bot.get_channel(channel_id)
                    if channel:
                        message = await channel.fetch_message(message_id)
                except (discord.NotFound, discord.Forbidden, discord.HTTPException, ValueError) as e:
                    logger.warning(f"[TASK: NAP_THE_CAO] Kh√¥ng th·ªÉ t√¨m message trong channel {card_history.channel_discord_id}: {str(e)}")
            
            # N·∫øu kh√¥ng t√¨m th·∫•y message b·∫±ng channel_id, th·ª≠ t√¨m trong t·∫•t c·∫£ channel
            if not message:
                for guild in self.bot.guilds:
                    for channel in guild.text_channels:
                        try:
                            message = await channel.fetch_message(message_id)
                            if message:
                                break
                        except (discord.NotFound, discord.Forbidden, discord.HTTPException):
                            continue
                    if message:
                        break
            
            if not message:
                logger.warning(f"[TASK: NAP_THE_CAO] Kh√¥ng t√¨m th·∫•y Discord message v·ªõi ID: {message_id}")
                return
            
            # T·∫°o embed m·ªõi d·ª±a tr√™n tr·∫°ng th√°i
            new_embed = None
            if status == "success":
                new_embed = self._success_embed(card_history)
            elif status == "wrong_amount":
                new_embed = self._wrong_amount_embed(card_history)
            elif status == "failed":
                new_embed = self._failed_embed(card_history, error_message)
            
            if new_embed:
                await message.edit(embed=new_embed)
                logger.info(f"[TASK: NAP_THE_CAO] ƒê√£ c·∫≠p nh·∫≠t Discord message cho giao d·ªãch: {card_history.transaction_id}")
            
        except Exception as e:
            logger.error(f"[TASK: NAP_THE_CAO] L·ªói khi c·∫≠p nh·∫≠t Discord message cho giao d·ªãch {card_history.transaction_id}: {str(e)}")

    def _success_embed(self, card_history: HistoryExchangeCard) -> discord.Embed:
        """
        T·∫°o embed th√¥ng b√°o th√†nh c√¥ng
        """

        telco = card_history.telco
        amount = card_history.value
        code = card_history.code
        serial = card_history.serial
        order_id = card_history.transaction_id
        card_value = card_history.card_value

        embed = discord.Embed(
            title="‚úÖ Th·∫ª c√†o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng",
            description="Th·∫ª c√†o c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng v·ªõi ƒë√∫ng m·ªánh gi√°!",
            color=discord.Color.green(),
        )
        embed.add_field(name="Nh√† m·∫°ng", value=telco, inline=True)
        embed.add_field(name="M·ªánh gi√°", value=f"{amount:,} VND", inline=True)
        embed.add_field(name="M√£ giao d·ªãch", value=f"`{order_id}`", inline=True)
        embed.add_field(name="M√£ th·∫ª", value=f"||{code}||", inline=True)
        embed.add_field(name="Serial", value=f"||{serial}||", inline=True)
        embed.add_field(name="M·ªánh gi√° th·ª±c t·∫ø", value=f"**{card_value:,} VND**", inline=True)
        embed.add_field(
            name="üéâ Ch√∫c m·ª´ng", 
            value="Th·∫ª c√†o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng v·ªõi ƒë√∫ng m·ªánh gi√°!", 
            inline=False
        )
        embed = _add_footer(embed)
        return embed
    
    def _wrong_amount_embed(self, card_history: HistoryExchangeCard) -> discord.Embed:
        """
        T·∫°o embed th√¥ng b√°o th√†nh c√¥ng sai m·ªánh gi√° (nh·∫≠n 50% gi√° tr·ªã)
        """

        telco = card_history.telco
        amount = card_history.value
        code = card_history.code
        serial = card_history.serial
        order_id = card_history.transaction_id
        card_value = card_history.card_value
        
        embed = discord.Embed(
            title="‚ö†Ô∏è Th·∫ª c√†o sai m·ªánh gi√°",
            description="Th·∫ª c√†o ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω nh∆∞ng sai m·ªánh gi√°, gi√° tr·ªã s·∫Ω b·ªã tr·ª´ 50%.",
            color=discord.Color.orange(),
        )
        embed.add_field(name="Nh√† m·∫°ng", value=telco, inline=True)
        embed.add_field(name="M·ªánh gi√° khai b√°o", value=f"{amount:,} VND", inline=True)
        embed.add_field(name="M√£ giao d·ªãch", value=f"`{order_id}`", inline=True)
        embed.add_field(name="M√£ th·∫ª", value=f"||{code}||", inline=True)
        embed.add_field(name="Serial", value=f"||{serial}||", inline=True)
        embed.add_field(name="M·ªánh gi√° th·ª±c t·∫ø", value=f"{card_value:,} VND", inline=True)
        embed.add_field(
            name="‚ö†Ô∏è L∆∞u √Ω", 
            value="Do th·∫ª sai m·ªánh gi√°, gi√° tr·ªã ƒë√£ b·ªã tr·ª´ 50% theo quy ƒë·ªãnh.", 
            inline=False
        )
        embed = _add_footer(embed)
        return embed

    def _failed_embed(self, card_history: HistoryExchangeCard, error_message: str = None) -> discord.Embed:
        """
        T·∫°o embed th√¥ng b√°o th·∫•t b·∫°i
        """

        telco = card_history.telco
        amount = card_history.value
        code = card_history.code
        serial = card_history.serial
        order_id = card_history.transaction_id
        
        embed = discord.Embed(
            title="‚ùå Th·∫ª c√†o x·ª≠ l√Ω th·∫•t b·∫°i",
            description="R·∫•t ti·∫øc, th·∫ª c√†o c·ªßa b·∫°n kh√¥ng th·ªÉ ƒë∆∞·ª£c x·ª≠ l√Ω.",
            color=discord.Color.red(),
        )
        embed.add_field(name="Nh√† m·∫°ng", value=telco, inline=True)
        embed.add_field(name="M·ªánh gi√°", value=f"{amount:,} VND", inline=True)
        embed.add_field(name="M√£ giao d·ªãch", value=f"`{order_id}`", inline=True)
        embed.add_field(name="M√£ th·∫ª", value=f"||{code}||", inline=True)
        embed.add_field(name="Serial", value=f"||{serial}||", inline=True)
        embed.add_field(name="‚†Ä", value="‚†Ä", inline=True)  # Spacer
        if error_message:
            embed.add_field(
                name="‚ùå L√Ω do", 
                value=f"{error_message}", 
                inline=False
            )
        else:
            embed.add_field(
                name="‚ùå L√Ω do", 
                value="Th·∫ª c√†o kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.", 
                inline=False
            )
        embed = _add_footer(embed)
        return embed



# H√†m setup() n√†y l√† b·∫Øt bu·ªôc ƒë·ªÉ bot c√≥ th·ªÉ load file n√†y nh∆∞ m·ªôt Cog
async def setup(bot):
    await bot.add_cog(NapTheCaoTask(bot))
